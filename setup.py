import os
import getpass
import asyncio
from src.assistant_manager import OpenAIAssistantManager
from src.files_manager import OpenAIFilesManager




openai_api_key = None
tavily_api_key = None
assistant_manager = None
file_manager = None
assistants_data = {}
base_dir = "./data/lkb/S3"

# Prepare data to write to .env file
assistants_info = {
    "AWSSecurityResearcher": {
        "instructions": "You are an information security researcher providing answers based on online research. Utilize the integrated search API function to find relevant online information. It's crucial to rely on this method rather than using pre-existing knowledge to ensure the freshness and reliability of the information provided. Include relevant URLs at the end of your answers to cite sources.",
        "tools": [
            {"type": "code_interpreter"},
            {
            "type": "function",
            "function": {
                "name": "tavily_search",
                "description": "Get information on recent events from the web.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {"type": "string", "description": "The search query to use. For example: 'List 10 websites that contains security recommendations for Amazon S3'"},
                        },
                    "required": ["query"]
                    }
                }
            }
        ],
        "model": "gpt-4-0125-preview"
    },
    "SecurityFileAnalyzer": {
        "instructions": "A specialized assistant dedicated to analyzing security-related files and extracting security recommendations. It focuses on scrutinizing documents related to cloud computing, with a particular emphasis on AWS services, to identify, evaluate, and summarize security recommendations within these documents. This assistant is designed to:\n\nAnalyze Security Files: Perform a thorough examination of attached files, identifying all security recommendations, including proposed or implemented policies, procedures, and security controls. Evaluate the effectiveness and appropriateness of these controls.\n\nExtract Security Recommendations: Distill and summarize security recommendations from the files, focusing on critical aspects that impact cloud security. This involves identifying best practices, security gaps, and suggestions for improvements or additional implementations.\n\nEvaluate Against Best Practices: Compare extracted security recommendations against industry best practices, relevant compliance standards, and security frameworks. This helps in identifying deviations, redundancies, or areas requiring additional focus to ensure the security of cloud resources.\n\nProvide Practical and Specific Recommendations: Based on the analysis, offer clear and actionable advice for adjusting or enhancing the documented security policies and controls. This includes suggesting the implementation of new controls, modifications to existing policies, and the adoption of practices that align the analyzed documents with current security standards.\n\nThis assistant emphasizes an evidence-based, detailed approach to cloud document security analysis, aiming to improve overall security posture through informed and contextual recommendations. It is designed to facilitate risk identification, promoting the implementation of robust and adaptive security strategies to effectively protect cloud resources and data.",
        "tools": [
            {"type": "code_interpreter"},
            {"type": "retrieval"}
        ],
        "model": "gpt-4-0125-preview"
    },
    "AWSSecurityExpert": {
        "instructions": "An assistant specialized in providing customized security recommendations for a wide range of AWS products. It should analyze the configuration and usage of each product, identify potential vulnerabilities, and recommend specific security controls, aligned with information security best practices, relevant compliance standards, and security frameworks. The assistant should stay updated on the latest security threats and vulnerabilities.",
        "tools": [{"type": "code_interpreter"}],
        "model": "gpt-4-0125-preview"
    },
    "AWSSecurityAuditor": {
        "instructions": "A specialized assistant for conducting detailed comparisons and critical analyses of security controls for AWS products, juxtaposing recommendations from attached documents with security suggestions generated by other AI assistants. This assistant is designed to:\n\nAnalyze Documents and Recommendations:\nEvaluate both recommendations from attached documents and security suggestions provided by other assistants, focusing on AWS products. This includes proposed or implemented policies, procedures, and security controls.\n\nIdentify Discrepancies and Improvement Opportunities:\nDetect aspects of security controls in attached documents not covered by external recommendations and identify potential conflicts or redundancies between attached documents and suggestions from assistants.\n\nRecommend Specific Actions:\nSuggest adjustments to attached documents or the implementation of additional security controls, aligning practices reflected in attached documents with industry best practices, relevant compliance standards, and security frameworks.\n\nStay Updated on Security Threats:\nKeep informed about the latest security threats and vulnerabilities, ensuring that analyses and recommendations consider current and emerging cybersecurity trends.\n\nSecurityGuardianAI is intended to be a proactive tool in identifying gaps in security as reflected in attached documents, promoting an evidence-based approach to strengthening security practices. It aims to facilitate informed decision-making on security risk management, leveraging in-depth analyses to ensure the integrity, confidentiality, and availability of AWS resources.",
        "tools": [
            {"type": "code_interpreter"},
            {"type": "retrieval"}
        ],
        "model": "gpt-4-0125-preview"
    },
    "BaselineWriter": {
        "instructions": "You are a cloud security expert assigned as a specialized assistant for reading chat histories, consolidating security recommendations, and creating security baselines. Your primary responsibility is to meticulously review the entire chat history, identify and extract all mentioned security recommendations, and use this information to develop a comprehensive security baseline that incorporates all gathered recommendations.",
        "tools": [
            {"type": "code_interpreter"},
        ],
        "model": "gpt-4-0125-preview"
    }
}


async def create_new_assistants(assistant_manager, assistants_info):
    global assistants_data
    print("")
    print("#### Creating new assistants... ####")
    for assistant_name, assistant_info in assistants_info.items():
        assistant_id = await assistant_manager.create_assistant(
            assistant_name,
            assistant_info["instructions"],
            assistant_info["tools"],
            assistant_info["model"]
        )
        assistants_data[assistant_name] = assistant_id
        print(f"----> Created assistant: {assistant_name} withID: {assistant_id}")



def save_data_to_env_file(api_key, assistants_data):
    print("")
    print("#### Saving data... ####")
    file_path = ".env"
    with open(file_path, 'w') as file:
        file.write(f"OPENAI_API_KEY={openai_api_key}\n")
        file.write(f"TAVILY_API_KEY={tavily_api_key}\n")
        for assistant_name, assistant_id in assistants_data.items():
            file.write(f"{assistant_name.upper().replace(' ', '_')}_ID={assistant_id}\n")
    print("********** All settings have been successfully saved. You're all set to go! **********")


async def deletes_existent_env_file():
    print("")
    print("#### Checking for an existing configuration file... ####")
    if os.path.exists(".env"):
        os.remove(".env")
        print("----> Delete file: .env")
    else:
        print("----> No .env file has been found")


async def deletes_existents_assistants():
    try:
        print("")
        print("#### Checking existing assistants... ####")
        response = await assistant_manager.list_assistants()
        if response:
            for assistant in response.data:
                await assistant_manager.delete_assistant(assistant.id)
                print (f"----> Deleted asssistant: {assistant.name} withID: {assistant.id}")
        else:
            print()
    except Exception as e:
        print(f"Oops! Something went wrong. Here's the error message: {e}.")
        exit(1)


async def deletes_existents_files():
    try:
        print("")
        print("#### Checking existing files... #####")
        files = await file_manager.list_files()
        if files:
            for file_object in files:
                await file_manager.delete_file(file_object.id)
                print(f"----> Deleted file: {file_object.filename} with ID: {file_object.id}")

        else:
            print("No files has been found")
    except Exception as e:
        print(f"Oops! Something went wrong. Here's the error message: {e}.")
        exit(1)

async def clear_existing_configs():
    try:
        await deletes_existent_env_file()
        await deletes_existents_assistants()
        await deletes_existents_files()

    except Exception as e:
        print(f"Oops! Something went wrong. Here's the error message: {e}.")
        exit(1)

async def get_keys_from_user():
    global openai_api_key
    global tavily_api_key
    print("")
    try:
        while True:
            content = getpass.getpass("Enter the OpenAI API key value (must start with 'sk-'): ")
            if content.startswith("sk-"):
                openai_api_key = content
            else:
                print("Error: API key must start with 'sk-'. Please try again.")

            content = getpass.getpass("Enter the Tavily API key value (must start with 'tvly-'): ")
            if content.startswith("tvly-"):
                tavily_api_key = content
                return
            else:
                print("Error: API key must start with 'sk-'. Please try again.")
            
    except Exception as e:
        print(f"Oops! Something went wrong. Here's the error message: {e}.")
        exit(1)

async def Instantiate_managers():
    global assistant_manager
    global file_manager
    try:
        assistant_manager = OpenAIAssistantManager(openai_api_key) # Create an instance of OpenAIAssistantManager
        file_manager = OpenAIFilesManager(openai_api_key) # Create an instance of OpenAIFilesManager
    except Exception as e:
        print(f"Oops! Something went wrong. Here's the error message: {e}.")
        exit(1)

async def upload_lkb_files_and_link_with_assistants():
    try:
        files = os.listdir(base_dir)
        if files:
            print("")
            print("#### Uploading and linking Local Knowledge base documents... ####")
            for filename in files:
                file_path = os.path.join(base_dir, filename)
                if os.path.isfile(file_path):
                    response = await file_manager.upload_file(file_path)
                    for assistant_name, assistant_id in assistants_data.items():
                        if assistant_name == "SecurityFileAnalyzer" or assistant_name == "AWSSecurityAuditor":
                            await assistant_manager.create_assistant_file(assistant_id, response.id)
                            print(f"----> Uploaded file: {filename} and associated with: {assistant_name}")

        else:
            print("No files has been found")
    except Exception as e:
        print(f"Oops! Something went wrong. Here's the error message: {e}.")
        exit(1)


async def main():
    await get_keys_from_user()
    await Instantiate_managers()
    await clear_existing_configs()
    await create_new_assistants(assistant_manager, assistants_info)
    await upload_lkb_files_and_link_with_assistants()
    save_data_to_env_file(openai_api_key, assistants_data)


if __name__ == "__main__":
    asyncio.run(main())
